package org.service.customer.services;

import java.util.List;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.service.customer.dto.CustomerRequestDTO;
import org.service.customer.dto.CustomerResponseDTO;
import org.service.customer.entities.Customer;
import org.service.customer.mappers.CustomerMapper;
import org.service.customer.repositories.CustomerRepository;
import org.springframework.stereotype.Service;

@Service
public class CustomerServiceImpl implements CustomerService{
	
	/** Maping Object Object --> map les objet metier 
	 * avec les object UI (DTO) utilisant les setter et getter **/
	 
	private CustomerRepository customerRepository;

	private CustomerMapper customerMapper;

	// c'est possible de faire autowired mais de preference faire l'injection par
	// constructeur
	public CustomerServiceImpl(CustomerRepository customerRepository, CustomerMapper customerMapper) {
		this.customerRepository = customerRepository;
		this.customerMapper = customerMapper;
	}

	@Override
	public CustomerResponseDTO getCustomer(String id) {
		Customer customer = customerRepository.findById(id).get();
		return customerMapper.customerToCustomerDTO(customer);
	}

	@Override
	public List<Customer> getCustomers() {
		return customerRepository.findAll();
		return customers.stream().map((customer) -> customerMapper.customerToCustomerDTO(customer))
				.collect(Collectors.toList());
	}

	@Override
	public CustomerResponseDTO save(CustomerRequestDTO customerRequestDTO) {
		Customer customer = customerMapper.customerRequestDtoToCustomer(customerRequestDTO);
		Customer savedCustomer = customerRepository.save(customer);
		return customerMapper.customerToCustomerDTO(savedCustomer);
	}

	@Override
	public CustomerResponseDTO update(CustomerRequestDTO customerRequestDTO) {
		Customer customer = customerMapper.customerRequestDtoToCustomer(customerRequestDTO);
		Customer savedCustomer = customerRepository.save(customer);
		return customerMapper.customerToCustomerDTO(savedCustomer);
	}

	@Override
	public void deleteCustomer(String id) {
		customerRepository.deleteById(id);
	}
}
